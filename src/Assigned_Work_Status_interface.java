
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;



public class Assigned_Work_Status_interface extends javax.swing.JFrame {

    
   Connection conn;
   Statement statement;
   ResultSet resultSet,resultSet2,resultSet3,resultSet4,resultSet5;
    ResultSetMetaData resultsetMetaData;
    int rowcount;
    public Assigned_Work_Status_interface() {
        initComponents();
        OracleConnection OC=new OracleConnection();
        String[] stringArray = OC.connection();
        
        try{
           conn=DriverManager.getConnection(stringArray[0],stringArray[1],stringArray[2]);
            if(conn!=null)
            {
                
                System.out.println("Connection Sucessful in Assigned_Work_Status_interface");
                statement=conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE,ResultSet.CONCUR_UPDATABLE);
            }
            
            
        }catch(SQLException e){
            System.out.println("Connection failed");
        }
         setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE );
         showData();
    }

    void showData()
    {
       
        DefaultTableModel model;
        model=(DefaultTableModel) pending_complete_table.getModel(); 
        
        String  query=String.format("select * from Response_Issue where Issue_Status!=0");
        String issue_name,stu_id,stuff_id,Issue_des;
        int Issue_status,issue_cost;
       try {
           resultSet = statement.executeQuery(query);
            while(resultSet.next())
           {
                issue_name=resultSet.getString("Issue_Name");
                stu_id=resultSet.getString("S_ID");
                stuff_id=resultSet.getString("Stuff_ID");
                Issue_status=resultSet.getInt("Issue_Status");
                Issue_des=resultSet.getString("Issue_Descr");
                issue_cost=resultSet.getInt("Issue_Cost");
                
                if(Issue_status==1)
                {
                    model.insertRow(model.getRowCount(),new Object[]{issue_name,stu_id,stuff_id,"Pending",Issue_des,issue_cost,false});
                }
                else if(Issue_status==2)
                {
                     model.insertRow(model.getRowCount(),new Object[]{issue_name,stu_id,stuff_id,"Done",Issue_des,issue_cost,false});
                }
                else if(Issue_status==3)
                {
                     model.insertRow(model.getRowCount(),new Object[]{issue_name,stu_id,stuff_id,"Payment Not clear",Issue_des,issue_cost,false});
                }
                
                
           }
       } catch (SQLException ex) {
           Logger.getLogger(Assigned_Work_Status_interface.class.getName()).log(Level.SEVERE, null, ex);
       }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        pending_complete_table = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        updateBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1086, 559));
        getContentPane().setLayout(null);

        pending_complete_table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Issue Name", "Student ID", "Stuff Id", "Issue Status", "Issue Descr", "Issue Cost", "Approval"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Integer.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(pending_complete_table);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setText("Pending Or Completed List");

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(376, 376, 376)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 370, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 938, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(470, 470, 470)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(updateBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        getContentPane().add(jPanel1);
        jPanel1.setBounds(0, 0, 998, 550);

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
       String query=String.format("select count(*) as c from Response_Issue where Issue_Status!=0");
       try {
           resultSet = statement.executeQuery(query);
            resultSet.next();
           rowcount=resultSet.getInt("c");
            for(int i=0;i<rowcount;i++)
            {
                String issue_name=((String)pending_complete_table.getValueAt(i,0)).toString();
                String studidd= ((String)pending_complete_table.getValueAt(i,1)).toString();
                String stuffid= ((String)pending_complete_table.getValueAt(i,2)).toString();
                
                Boolean chk= ((Boolean)pending_complete_table.getValueAt(i,6)).booleanValue();
                
                if(chk)
                {
                    if(issue_name.equals("complain"))
                    {
                        String query2=String.format("Delete from Response_Issue where S_ID='%s' and Stuff_ID='%s'",studidd,stuffid);
                       resultSet2 = statement.executeQuery(query2);
                    }
                    else if(issue_name.equals("seatcancel"))
                    {
                        ///took the room no of cancelled student
                        String queryforseat=String.format("Select Room_No from Student_Information where S_ID='%s'",studidd);
                        resultSet3=statement.executeQuery(queryforseat);
                        resultSet3.next();
                         String room_no=resultSet3.getString("Room_No");
                        ///Deleting from all table except roon_seat
                        String query3=String.format("Delete from Student_Information where S_ID='%s'",studidd);
                        resultSet4 = statement.executeQuery(query3);
                        
                       
                        //cur seat of room
                        String query4=String.format("select Cur_No_Seat from Room_Information where Room_No='%s'",room_no);
                        resultSet5= statement.executeQuery(query4);
                        resultSet5.next();
                        int count_seat=resultSet5.getInt("Cur_No_Seat");
                        CallableStatement cstmt = null;
                           try {
                                 //String SQL = "{call incre (?, ?)}";
                                 String SQL = "{call seatdecr (?, ?)}";
                                 cstmt = conn.prepareCall (SQL);
                                cstmt.setString(1,room_no);
                                cstmt.setInt(2,count_seat);
                                System.out.println("Executing stored procedure...");
                                 cstmt.execute();
   
                            }
                            catch (SQLException e) {
   
                                }
                            finally {
                                try {
                                    cstmt.close();
                                } catch (SQLException ex) {
                                     Logger.getLogger(ManagerInterface.class.getName()).log(Level.SEVERE, null, ex);
                                }
                        }
                    }
                     
                }
                
            }
        } catch (SQLException ex) {
           Logger.getLogger(Assigned_Work_Status_interface.class.getName()).log(Level.SEVERE, null, ex);
       }
       
    }//GEN-LAST:event_updateBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Assigned_Work_Status_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Assigned_Work_Status_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Assigned_Work_Status_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Assigned_Work_Status_interface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Assigned_Work_Status_interface().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable pending_complete_table;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
